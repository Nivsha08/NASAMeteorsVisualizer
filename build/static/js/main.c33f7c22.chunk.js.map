{"version":3,"sources":["components/queryManager/QueryManager.tsx","components/header/Header.tsx","components/yearSelector/YearSelector.tsx","components/resultSummary/ResultSummary.tsx","components/massSelector/MassSelector.tsx","utils/DateUtils.ts","models/Meteor.ts","utils/ArrayUtils.ts","models/QueryError.ts","models/MeteorsSearcher.ts","components/fallingMeteors/FallingMeteors.tsx","components/meteorMarker/MeteorMarker.tsx","components/map/Map.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["NotificationTypes","Header","props","className","icon","faMeteor","title","subtitle","style","color","opacity","YearSelector","sliderMarks","minYear","label","maxYear","value","min","max","tooltipVisible","marks","onChange","e","setValue","size","placeholder","ResultSummary","meteors","length","onClick","toggleDetails","type","detailsVisible","MinusOutlined","PlusOutlined","MassSelector","maxMass","QueryManager","useState","searcher","year","setYear","mass","setMass","summaryVisible","showSummary","notify","message","notification","placement","analyzeQueryResults","error","INFO","emptyResult","closestYear","findBestResultsYear","getNoResultsMsg","reset","filterByYear","filterByMinimalMass","updateQueryKey","result","key","queryKey","DateParseError","name","Error","DateOperationError","DateUtils","date","moment","property","get","Meteor","fall","location","recognizer","metadata","this","parseYear","parseMetadata","parseLocation","parseRecognizer","coordinates","lat","lng","knownLocation","knownYear","knownMass","parse","id","nametype","geolocation","class","recclass","reclat","reclong","InvalidArrayError","ArrayUtils","arr","_","cloneDeep","sortBy","QueryError","NoMeteorsInThisYear","MaxMassExceeded","MeteorsSearcher","data","initialMeteors","filters","parsedData","parseData","validMeteors","removeInvalidMeteors","clone","getInitialFilters","map","item","filter","m","isValid","Number","parseInt","minimalMass","sufficeMassMeteors","findMax","findMin","FallingMeteors","indicesArray","Array","from","i","numberFormatter","Intl","NumberFormat","MeteorMarker","Marker","position","meteor","Popup","format","panelBodyStyle","padding","margin","Map","bodyStyle","height","closable","destroyOnClose","onClose","closeMap","visible","expanded","center","zoom","TileLayer","url","fetchDataset","a","mockDataset","App","dataset","setDataset","setSearcher","setQueryKey","detailsView","showDetails","mapExpanded","setMapExpansion","useEffect","setApplicationDataset","toggleDetailsView","updateSearcher","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c33f7c22.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./QueryManager.scss\";\nimport {MeteorProperties} from \"../../types/meteors\";\nimport MeteorsSearcher from \"../../models/MeteorsSearcher\";\nimport {YearSelector} from \"../yearSelector\";\nimport {ResultSummary} from \"../resultSummary\";\nimport {MassSelector} from \"../massSelector\";\nimport {Button, notification} from \"antd\";\nimport QueryError from \"../../models/QueryError\";\n\ninterface QueryManagerProps {\n    dataset: MeteorProperties[];\n    searcher: MeteorsSearcher;\n    updateSearcher: (newSearcher: MeteorsSearcher) => void;\n    queryKey: number;\n    toggleDetails: () => void;\n    detailsVisible: boolean;\n    updateQueryKey: () => void;\n}\n\nenum NotificationTypes {\n    SUCCESS = \"success\",\n    WARNING = \"warning\",\n    INFO = \"info\",\n    ERROR = \"error\"\n}\n\nconst getNoResultsMsg = (year: number) => (\n    `The mass was not found, jumping to first-year where there is a mass that fits the criteria - ${year}`\n);\n\nconst QueryManager = (props: QueryManagerProps) => {\n\n    const [year, setYear] = useState<number>(props.searcher.minYear);\n    const [mass, setMass] = useState<number>(0);\n    const [summaryVisible, showSummary] = useState<boolean>(false);\n\n    const notify = (message: string, type: NotificationTypes): void => {\n        notification[type]({message, placement: \"bottomLeft\", className: \"notification\"})\n    };\n\n    const updateQuery = (): void => {\n        props.searcher.reset();\n        props.searcher.filterByYear(year).filterByMinimalMass(mass);\n        analyzeQueryResults();\n        props.updateQueryKey();\n        showSummary(true);\n    };\n\n    const analyzeQueryResults = (): void => {\n        if (props.searcher.error) {\n            notify((props.searcher.error as QueryError).message, NotificationTypes.INFO);\n        }\n        else if (props.searcher.emptyResult) {\n            const closestYear: number = props.searcher.findBestResultsYear(mass, year);\n            setYear(closestYear);\n            notify(getNoResultsMsg(closestYear), NotificationTypes.INFO);\n        }\n    };\n\n    const resetQuery = (): void => {\n        props.searcher.reset();\n        setYear(0);\n        setMass(0);\n        showSummary(false);\n        props.updateQueryKey();\n    };\n\n    return (\n        <div className=\"query-manager-wrapper\">\n            <YearSelector value={year} setValue={setYear}\n                          minYear={props.searcher.minYear}\n                          maxYear={props.searcher.maxYear}/>\n            <MassSelector value={mass} setValue={setMass}\n                          maxMass={props.searcher.maxMass}/>\n            <div className=\"buttons-wrapper\">\n                <Button className=\"apply-button\" size={\"large\"} type={\"ghost\"}\n                        onClick={updateQuery}>Apply query</Button>\n                <Button className=\"reset-button\" size={\"large\"} type={\"ghost\"}\n                        onClick={resetQuery}>Reset</Button>\n            </div>\n            {\n                summaryVisible ?\n                    <ResultSummary meteors={props.searcher.result.meteors}\n                                   detailsVisible={props.detailsVisible}\n                                   toggleDetails={props.toggleDetails}\n                                   key={props.queryKey}/>\n                    : null\n            }\n        </div>\n    )\n};\n\nexport default QueryManager;\n","import React from \"react\";\nimport \"./Header.scss\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faMeteor} from \"@fortawesome/free-solid-svg-icons\";\n\ninterface HeaderProps {\n    title: string;\n    subtitle: string;\n}\n\nconst Header = (props: HeaderProps) => (\n    <div className=\"header-wrapper\">\n        <FontAwesomeIcon icon={faMeteor} className=\"icon\" />\n        <span className=\"title\" title={props.title}>{ props.title }</span>\n        <span className=\"subtitle\">{ props.subtitle }</span>\n    </div>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./YearSelector.scss\";\nimport {InputNumber, Slider} from \"antd\";\n\ninterface YearSelectorProps {\n    value: number;\n    setValue: (value: number) => void;\n    minYear: number;\n    maxYear: number;\n}\n\nconst style = {color: \"#ffffff\", opacity: .5};\n\nconst YearSelector = (props: YearSelectorProps) => {\n\n    const sliderMarks = {\n        [props.minYear]: {style, label: props.minYear},\n        1000: {style, label: \"1000\"},\n        1500: {style, label: \"1500\"},\n        1700: {style, label: \"1700\"},\n        1900: {style, label: \"1900\"},\n        [props.maxYear]: {style, label: props.maxYear}\n    };\n\n    const handleValue = (value: number): void => {\n        if (value) props.setValue(value);\n        else props.setValue(props.minYear);\n    };\n\n    return (\n        <div className=\"year-selector-wrapper\">\n            <span className=\"instruction\">Start by choosing a year</span>\n            <Slider value={props.value}\n                    min={props.minYear}\n                    max={props.maxYear}\n                    tooltipVisible={false}\n                    marks={sliderMarks}\n                    onChange={(e: number) => props.setValue(e)} />\n            <div className=\"input-wrapper\">\n                <InputNumber className=\"year-input\"\n                             size={\"large\"}\n                             min={props.minYear}\n                             max={props.maxYear}\n                             placeholder={\"CHOOSE YEAR TO INVESTIGATE\"}\n                             value={props.value}\n                             onChange={e => handleValue(e as number)}/>\n            </div>\n        </div>\n    )\n};\n\nexport default YearSelector;\n","import React from \"react\";\nimport Meteor from \"../../models/Meteor\";\nimport \"./ResultSummary.scss\";\nimport {Button} from \"antd\";\nimport {PlusOutlined, MinusOutlined} from \"@ant-design/icons\";\n\ninterface ResultSummaryProps {\n    meteors: Meteor[];\n    detailsVisible: boolean;\n    toggleDetails: () => void;\n}\n\nconst ResultSummary = (props: ResultSummaryProps) => {\n\n    return (\n        <div className=\"result-summary\">\n            <div className=\"amount-summary\">{props.meteors.length}</div>\n            <span className=\"bottom-summary\">meteors fit the criteria</span>\n            {\n                (props.meteors.length > 0) ?\n                    <Button onClick={props.toggleDetails} className=\"details-button\" type={\"link\"}>\n                        details {props.detailsVisible ? <MinusOutlined /> : <PlusOutlined />}\n                    </Button>\n                    : null\n            }\n        </div>\n    );\n};\n\nexport default ResultSummary;\n","import React from \"react\";\nimport \"./MassSelector.scss\";\nimport {InputNumber} from \"antd\";\n\ninterface MassSelectorProps {\n    value: number;\n    setValue: (value: number) => void;\n    maxMass: number;\n}\n\nconst MassSelector = (props: MassSelectorProps) => {\n\n    const handleValue = (value: number): void => {\n        if (value) props.setValue(value);\n        else props.setValue(0);\n    };\n\n    return (\n        <div className=\"mass-selector-wrapper\">\n            <span className={\"instruction\"}>Go on and choose a minimal meteor mass</span>\n            <div className=\"input-wrapper\">\n                <InputNumber className={\"mass-input\"}\n                             value={props.value}\n                             min={0}\n                             max={props.maxMass}\n                             placeholder={\"CHOOSE MINIMAL MASS\"}\n                             size={\"large\"}\n                             onChange={e => handleValue(e as number)}/>\n            </div>\n        </div>\n    );\n};\n\nexport default MassSelector;\n","import moment, {Moment, unitOfTime} from \"moment\";\n\nclass DateParseError extends Error {\n    readonly name: string = \"DateParseError\";\n}\n\nclass DateOperationError extends Error {\n    readonly name: string = \"DateOperationError\";\n}\n\nclass DateUtils {\n\n    static parse(date: string): Moment {\n        try {\n            return moment(date);\n        }\n        catch (error) {\n            throw new DateParseError(\"Parse error: invalid date string given.\");\n        }\n    }\n\n    static get(date: Moment, property: unitOfTime.Base) {\n        try {\n            return date.get(property);\n        }\n        catch (error) {\n            throw new DateOperationError(\n                `Invalid operation: cannot get '${property}' out of the given date.`);\n        }\n    }\n\n}\n\nexport default DateUtils;\n","import {Coordinate, MeteorLocation, MeteorMetadata, MeteorProperties, Recognizer} from \"../types/meteors\";\nimport DateUtils from \"../utils/DateUtils\";\n\nclass Meteor {\n\n    name: null | string;\n    mass: null | string | number;\n    fall: null | string;\n    year: null | number;\n    location: null | MeteorLocation;\n    recognizer: Recognizer;\n    metadata: null | MeteorMetadata;\n\n    constructor(props: MeteorProperties) {\n        this.name = (props.name) ? props.name : null;\n        this.mass = (props.mass) ? props.mass : null;\n        this.fall = (props.fall) ? props.fall : null;\n        this.year = (props.year) ? this.parseYear(props.year) : null;\n        this.metadata = this.parseMetadata(props);\n        this.location = this.parseLocation(props);\n        this.recognizer = this.parseRecognizer(props);\n    }\n\n    knownLocation(): boolean {\n        return (this.location?.coordinates.lat != null && this.location?.coordinates.lng != null);\n    }\n\n    knownYear(): boolean {\n        return (this.year != null);\n    }\n\n    knownMass(): boolean {\n        return (this.mass != null);\n    }\n\n    isValid(): boolean {\n        return (this.knownLocation() && this.knownYear() && this.knownMass());\n    }\n\n    private parseYear(date: string): number {\n        return DateUtils.get(DateUtils.parse(date), \"year\");\n    }\n\n    private parseMetadata(props: MeteorProperties): MeteorMetadata {\n        return {\n            id: (props.id) ? props.id : null,\n            nametype: (props.nametype) ? props.nametype : null\n        }\n    }\n\n    private parseLocation(props: MeteorProperties): null | MeteorLocation {\n        return (!props.geolocation) ? null :\n            {\n                type: props.geolocation.type,\n                coordinates: {\n                    lat: props.geolocation.coordinates[0],\n                    lng: props.geolocation.coordinates[1]\n                }\n            };\n    }\n\n    private parseRecognizer(props: MeteorProperties): Recognizer {\n        return {\n            class: props.recclass ? props.recclass : null,\n            coordinates: {\n                lat: (props.reclat) ? props.reclat : null,\n                lng: (props.reclong) ? props.reclong : null\n            }\n        }\n    }\n}\n\nexport default Meteor;\n","import _ from \"lodash\";\n\nclass InvalidArrayError extends Error {\n    readonly name: string = \"InvalidArrayError\";\n}\n\nclass ArrayUtils {\n\n    static clone<T> (arr: T[]): T[] {\n        return _.cloneDeep(arr);\n    }\n\n    static sortBy<T> (arr: T[], property: keyof T): T[] {\n        return _.sortBy(arr, property);\n    }\n\n    static findMin(arr: number[]): number {\n        if (arr && arr.length > 0) {\n            return _.min(arr) as number;\n        }\n        else {\n            throw new InvalidArrayError(\"the array is empty or undefined.\");\n        }\n    }\n\n    static findMax(arr: number[]): number {\n        if (arr && arr.length > 0) {\n            return _.max(arr) as number;\n        }\n        else {\n            throw new InvalidArrayError(\"the array is empty or undefined.\");\n        }\n    }\n\n}\n\nexport default ArrayUtils;\n","abstract class QueryError extends Error {\n    readonly name: string = \"QueryError\";\n}\n\nexport class NoMeteorsInThisYear extends QueryError {\n    readonly name: string = \"NoMeteorsInThisYear\";\n\n    constructor(year: number) {\n        super(`No meteors landed in ${year}. Try searching in a different year`);\n    }\n}\n\nexport class MaxMassExceeded extends QueryError {\n    readonly name: string = \"MaxMassExceeded\";\n\n\n    constructor(maxMass: number) {\n        super(`There's no meteor with mass larger than ${maxMass} kg - just try a smaller number!`);\n    }\n}\n\nexport default QueryError;\n","import {MeteorProperties} from \"../types/meteors\";\nimport Meteor from \"./Meteor\";\nimport ArrayUtils from \"../utils/ArrayUtils\";\nimport QueryError, {MaxMassExceeded, NoMeteorsInThisYear} from \"./QueryError\";\n\ninterface QueryFilters {\n    year: number;\n    mass: number;\n}\n\ninterface QueryResult {\n    year: number;\n    minimalMass: number;\n    meteors: Meteor[];\n}\n\nclass MeteorsSearcher {\n\n    private readonly initialMeteors: Meteor[];\n    private filters: QueryFilters;\n    private meteors: Meteor[];\n    error: QueryError | null = null;\n\n    constructor(data: MeteorProperties[] | Meteor[]) {\n        const parsedData: Meteor[] = this.parseData(data);\n        const validMeteors: Meteor[] = this.removeInvalidMeteors(parsedData);\n        this.initialMeteors = ArrayUtils.sortBy(validMeteors, \"year\");\n        this.meteors = ArrayUtils.clone(this.initialMeteors);\n        this.filters = this.getInitialFilters();\n    }\n\n    private parseData(data: MeteorProperties[] | Meteor[]): Meteor[] {\n        if (data.length === 0) {\n            return [];\n        } else if (data[0] instanceof Meteor) {\n            return data as Meteor[];\n        } else {\n            return (data as MeteorProperties[])\n                .map((item: MeteorProperties): Meteor => new Meteor(item));\n        }\n    }\n\n    private removeInvalidMeteors(data: Meteor[]): Meteor[] {\n        return data.filter((m: Meteor) => m.isValid());\n    }\n\n    private getInitialFilters(): QueryFilters {\n        return {year: this.minYear, mass: 0};\n    }\n\n    filterByYear(year: string | number): MeteorsSearcher {\n        this.filters.year = (typeof year === \"string\") ? Number.parseInt(year) : year;\n        this.meteors = this.meteors\n            .filter((m: Meteor) => m.knownYear())\n            .filter((m: Meteor) => (m.year as number) === this.filters.year);\n        if (this.meteors.length === 0) {\n            this.error = new NoMeteorsInThisYear(this.filters.year);\n        }\n        return this;\n    }\n\n    filterByMinimalMass(mass: string | number): MeteorsSearcher {\n        this.filters.mass = (typeof mass === \"string\") ? Number.parseInt(mass) : mass;\n        this.meteors = this.meteors\n            .filter((m: Meteor) => m.knownMass())\n            .filter((m: Meteor) => (m.mass as number) > this.filters.mass);\n        if (this.filters.mass >= this.maxMass) {\n            this.error = new MaxMassExceeded(this.maxMass);\n        }\n        return this;\n    }\n\n    findBestResultsYear(minimalMass: number, year: number): number {\n        this.reset();\n        const sufficeMassMeteors: Meteor[] = this.filterByMinimalMass(minimalMass).result.meteors;\n        const maxYear: number = ArrayUtils.findMax(\n            sufficeMassMeteors\n                .filter((m: Meteor) => (m.year as number) < year)\n                .map((m: Meteor) => m.year as number)\n        );\n        this.filters.year = maxYear;\n        this.meteors = sufficeMassMeteors.filter(\n            (m: Meteor) => (m.year as number) === maxYear);\n        return maxYear;\n    }\n\n    reset(): void {\n        this.meteors = ArrayUtils.clone(this.initialMeteors);\n        this.filters = this.getInitialFilters();\n        this.error = null;\n    }\n\n    get result(): QueryResult {\n        return {year: this.filters.year, minimalMass: this.filters.mass, meteors: this.meteors};\n    }\n\n    get emptyResult(): boolean {\n        return (this.result.meteors.length === 0);\n    }\n\n    get minYear(): number {\n        return ArrayUtils.findMin(this.initialMeteors.map(m => m.year as number));\n    }\n\n    get maxYear(): number {\n        return ArrayUtils.findMax(this.initialMeteors.map(m => m.year as number));\n    }\n\n    get maxMass(): number {\n        return ArrayUtils.findMax(this.initialMeteors.map(m => Number.parseInt(m.mass as string)));\n    }\n\n}\n\nexport default MeteorsSearcher;\n","import React from \"react\";\nimport \"./FallingMeteors.scss\";\n\nconst FallingMeteors = () => {\n    const MAX_METEORS = 15;\n    const indicesArray = Array.from({length: MAX_METEORS}, (_, i) => i);\n    return (\n        <div className=\"falling-meteors-wrapper\">\n            {\n                indicesArray.map((i: number) => (\n                    <i className={`meteor meteor-${i}`} key={i} />\n                ))\n            }\n        </div>\n    );\n};\n\nexport default FallingMeteors;\n","import React from \"react\";\nimport \"./MeteorMarker.scss\";\nimport Meteor from \"../../models/Meteor\";\nimport {LatLng, MeteorLocation} from \"../../types/meteors\";\nimport {LatLngExpression} from \"leaflet\";\nimport {Marker, Popup} from \"react-leaflet\";\n\ninterface MeteorMarkerProps {\n    meteor: Meteor\n}\n\nconst latLngToArray = (coordinates: LatLng): LatLngExpression => {\n    return [coordinates.lat as number, coordinates.lng as number];\n};\n\nconst numberFormatter = Intl.NumberFormat(\"en-US\");\n\nconst MeteorMarker = (props: MeteorMarkerProps) => {\n    return (\n        <Marker position={latLngToArray((props.meteor.location as MeteorLocation).coordinates)}>\n            <Popup>\n                <div className=\"marker-content\">\n                    <span>Name: <strong>{props.meteor.name}</strong></span>\n                    <span>Mass: <strong>{numberFormatter.format(props.meteor.mass as number)} kg</strong></span>\n                </div>\n            </Popup>\n        </Marker>\n    );\n};\n\nexport default MeteorMarker;\n","import React from \"react\";\nimport \"./Map.scss\";\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\nimport {Drawer} from \"antd\"\nimport Meteor from \"../../models/Meteor\";\nimport {MeteorMarker} from \"../meteorMarker\";\n\ninterface MapProps {\n    expanded: boolean;\n    closeMap: () => void;\n    meteors: Meteor[];\n}\n\nconst panelBodyStyle = {padding: 0, margin: 0};\nconst tiles = \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}{r}.png\";\n\nconst Map = (props: MapProps) => {\n    return (\n        <Drawer title={`${props.meteors.length} meteors fit the criteria - these are they locations`}\n                placement={\"bottom\"}\n                bodyStyle={panelBodyStyle}\n                height={550}\n                closable\n                destroyOnClose\n                onClose={props.closeMap}\n                visible={props.expanded}>\n            <LeafletMap center={[8, 0]} zoom={2}>\n                <TileLayer url={tiles}/>\n                {\n                    props.meteors.map(\n                        (m: Meteor, i: number) => <MeteorMarker meteor={m} key={i} />\n                    )\n                }\n            </LeafletMap>\n        </Drawer>\n    );\n};\n\nexport default Map;\n","import React, {useEffect, useState} from \"react\";\nimport \"./App.scss\";\nimport mockDataset from \"../../assets/meteors.json\";\nimport {Header} from \"../header\";\nimport {QueryManager} from \"../queryManager\";\nimport {MeteorProperties} from \"../../types/meteors\";\nimport MeteorsSearcher from \"../../models/MeteorsSearcher\";\nimport {FallingMeteors} from \"../fallingMeteors\";\nimport {Map} from \"../map\";\n\nconst fetchDataset = async () => mockDataset;\n\nconst App = () => {\n    const [dataset, setDataset] = useState<MeteorProperties[]>([]);\n    const [searcher, setSearcher] = useState<MeteorsSearcher | null>(null);\n    const [queryKey, setQueryKey] = useState<number>(0);\n    const [detailsView, showDetails] = useState<boolean>(false);\n    const [mapExpanded, setMapExpansion] = useState<boolean>(false);\n\n    useEffect(() => {\n        const setApplicationDataset = async () => {\n            const data: MeteorProperties[] = await fetchDataset();\n            setDataset(data);\n            setSearcher(new MeteorsSearcher(data));\n        };\n        setApplicationDataset();\n    }, []);\n\n    const updateQueryKey = () => {\n        setQueryKey(queryKey + 1);\n    };\n\n    const toggleDetailsView = () => {\n        showDetails(!detailsView);\n        setMapExpansion(!mapExpanded);\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"header-row\">\n                <Header title=\"MeteorsQuerist\"\n                        subtitle=\"meteors are falling as we speak\"/>\n            </div>\n            {\n                searcher ?\n                    <div className=\"query-row\">\n                        <QueryManager dataset={dataset}\n                                      searcher={searcher as MeteorsSearcher}\n                                      updateSearcher={setSearcher}\n                                      updateQueryKey={updateQueryKey}\n                                      detailsVisible={detailsView}\n                                      toggleDetails={toggleDetailsView}\n                                      queryKey={queryKey}/>\n                        <Map expanded={mapExpanded}\n                             closeMap={toggleDetailsView}\n                             meteors={searcher.result.meteors} />\n                        <FallingMeteors/>\n                    </div>\n                    : null\n            }\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.scss\";\nimport \"animate.css\";\nimport {App} from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}